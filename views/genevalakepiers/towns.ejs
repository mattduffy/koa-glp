<% if (flash?.info) { %>
  <div id="info" class="info">
    <span><%= flash.info %></span>
  </div>
<% } %>
<% if (flash?.message) { %>
  <div id="messages" class="messages">
    <span><%= flash.message %></span>
  </div>
<% } %>
<% if (flash?.error) { %>
  <div id="errors" class="errors">
    <span><%= flash.error %></span>
  </div>
<% } %>
<article>
  <section class="main">
    <h2><%= total %> Towns</h2>

    <% /* %>
    <div class="previousPier">
      <% if (skipBack > 1) { %>
      <a href="/associations?s=<%= skipBack %>">&lt; Prev</a>
      <% } else if (skipBack === 1) { %>
      <a href="/associations">&lt; Prev</a>
      <% } else { %>
      < Prev 
      <% } %>
    </div>
    <div class="nextPier">
      <% if ((offset + num) < total) { %>
      <a href="/associations?s=<%= skipForward %>">Next &gt;</a>
      <% } else { %>
      Next > 
      <% } %>
    </div>
    <% */ %>
    <ul id="resultsList" class="searchResults">
      <% const townColors = ['#fa9fb5', '#ae017e', '#f768a1', '#dd3497', '#fde0dd']
      towns.forEach((t, i) => {
        let a = `<li><a href="/towns/${t.t}" data-t="${t.t.replaceAll('-', '_')}" data-c="${townColors[i]}">${t.n}</a></li>`  %>
      <%- a %>
    <% }) %></ul>

  </section>
  <section class="map">
    <%# map embed %>
    <%- await include('./map-embed.ejs') -%>
    <%# map embed %>
    <script nonce="<%= nonce %>"
      src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
      crossorigin async
      data-callback="initMapKit"
      data-libraries="full-map,geojson,overlays"
      data-initial-token="">
    </script>
    <script nonce="<%= nonce %>" type="module">
      let page = 'marinas'

      const origin = '<%= origin %>'
      const jwtAccess = '<%= searchJwtAccess %>'     
      let map
      async function setupMapKitJs() {
        const tokenOpts = {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${jwtAccess}`,
          },
        }
        const request = new Request(`${origin}/mapkit/getToken`, tokenOpts)
        const response = await fetch(request)
        const { tokenID } = await response.json()
        console.log('tokenID: ', tokenID)
        if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
          // mapkit.core.js or the libraries are not loaded yet.
          // Set up the callback and wait for it to be called.
          await new Promise(resolve => { window.initMapKit = resolve })
          // Clean up
          console.info(window.mapkit.loadedLibraries)
          delete window.initMapKit
        }
        mapkit.init({
          authorizationCallback: function(done) {
            done(tokenID)
          },
        })
      }

      async function main() {
        await setupMapKitJs()
        // init / center the map over Geneva Bay 
        const lat = 42.587751
        const lon = -88.440669
        const genevaBay = new mapkit.CoordinateRegion(
          new mapkit.Coordinate(lat, lon),
          new mapkit.CoordinateSpan(0.1, 0.1)
        );
        const opts = {
          mapType: mapkit.Map.MapTypes.Hybrid,
          loadPriority: mapkit.Map.LoadPriorities.PointsOfInterest,
          selectableMapFeatures: [mapkit.MapFeatureType.PhysicalFeature, mapkit.MapFeatureType.PointOfInterest],
          visibleMapRect: mapkit.MapRect(0, 0, 1, 1),
          isZoomEnabled: true,
          showsCompass: mapkit.FeatureVisibility.Visible,
          showsScale: mapkit.FeatureVisibility.Visible,
          showsZoomControl: true,
          cameraDistance: 11000,
          showsPointsOfInterest: true,
          isRotationEnabled: true,
          isScrollEnabled: true,
          showsPointsOfInterest: true,
          showsMapTypeControl: false,
        } 
          window.map = new mapkit.Map("map", opts);
          window.map.region = genevaBay;
          await showTowns() 
      }
      await main()

      const annotations = []

      async function showTowns() {
        try {
          const response = await (await fetch(`${origin}/mapkit/towns`)).json()
          console.log(response)
          window.mapkit.importGeoJSON(response, {
            itemForFeature: (overlay, geoJSON) => {
              const links = document.querySelectorAll('a[data-t]')
              // console.log(geoJSON)
              // console.log(links)
              for (const l of links) {
                // console.log(`${geoJSON.properties.name} :${l.dataset.t}`)
                if (geoJSON.properties.name === `:${l.dataset.t}`) {
                  overlay.data = { t: l.dataset.t, c: l.dataset.c }
                  overlay.style = new window.mapkit.Style({
                    fillOpacity: 0.7,
                    lineWidth: 0.5,
                    fillColor: l.dataset.c
                  })
                  break
                }
              }
              return overlay
            },
            geoJSONDidComplete: overlays => {
              window.map.showItems(overlays);
            },
          })
        } catch (e) {
          console.error(e)
        }
      }
      // await showTowns()

      window.map.addEventListener('select', (e) => {
        if (e.overlay && e.overlay.data) {
          const links = document.querySelectorAll('a[data-t]')
          if (links.length > 0) {
            for (const l of links ) {
              if (e.overlay.data.t === l.dataset.t) {
                console.log(e.overlay.data.t, l.dataset.t)
                e.overlay.style.lineWidth = 2.5
                const href = document.querySelector(`a[data-t=${l.dataset.t}]`)
                href.style.backgroundColor = l.dataset.c
                href.style.fontWeight = '600'
                href.style.color = '#ffffff'
                break
              }
            }
          }
        }
      })

      window.map.addEventListener('deselect', (e) => {
        if (e.overlay && e.overlay.data) {
          // console.log(e.overlay.data)
          e.overlay.style.lineWidth = 0.5
        }
      })

      window.map.addEventListener("single-tap", async (e) => {
        e.preventDefault()
        e.stopPropagation()
        const {latitude, longitude} = window.map.convertPointOnPageToCoordinate(e.pointOnPage)
        // const coordinate = window.map.convertPointOnPageToCoordinate(e.pointOnPage)
        const defaultRadius = 50
        const defaultUnits = 'ft'
        console.log(`locate piers within ${defaultRadius} ${defaultUnits} of coords: ${longitude}, ${latitude}`)
        const results = await (await fetch(`${origin}/mapkit/locate/${longitude}/${latitude}/${defaultRadius}/${defaultUnits}`)).json()
        console.log(results)
        if (results?.total > 0) {
          results.documents.forEach((p) => {
            console.log(`${p.value.pier}, ${p.value.coords}, ${p.value.estateName}, ${p.value.business}, ${p.value.association}`)
              let subtitle = ' '
              if (p.value.business !== '' && p.value.association === '') subtitle = p.value.business
              if (p.value.association !== '' && p.value.business === '') subtitle = p.value.association
              if (p.value.firstname !== '' && p.value.lastname !== '') subtitle = `${p.value.firstname} ${p.value.lastname}`
              if (p.value.firstname !== '' && p.value.lastname === '') subtitle = p.value.firstname
              if (p.value.firstname === '' && p.value.lastname !== '') subtitle = p.value.lastname
              if (p.value.estateName !== '') subtitle = p.value.estateName
              console.info(`subtitle: ${subtitle}`)
              const annotationCallout = {
                calloutLeftAccessoryForAnnotation: () => {
                  const accessoryViewLeft = document.createElement("div")
                  return accessoryViewLeft
                },
                calloutRightAccessoryForAnnotation: () => {
                  const accessoryViewRight = document.createElement("a")
                  accessoryViewRight.className = "right-accessory-view"
                  accessoryViewRight.href = `${origin}/pier/${p.value.pier}`
                  accessoryViewRight.target = "_self"
                  accessoryViewRight.textContent = "\u{24D8}"
                  return accessoryViewRight
                }
              }
              const pierMarker = new window.mapkit.Coordinate(latitude, longitude)
              const pierAnnotation = new window.mapkit.MarkerAnnotation(pierMarker)
              pierAnnotation.title = `Pier ${p.value.pier}`
              pierAnnotation.subtitle = subtitle 
              pierAnnotation.animates = true
              pierAnnotation.selected = true
              pierAnnotation.color = "#4B93E0"
              pierAnnotation.callout = annotationCallout
              window.map.addAnnotation(pierAnnotation)
          })
        }
      })
    </script>
  </section>
</article>

