<% if (flash?.info) { %>
  <div id="info" class="info">
    <span><%= flash.info %></span>
  </div>
<% } %>
<% if (flash?.message) { %>
  <div id="messages" class="messages">
    <span><%= flash.message %></span>
  </div>
<% } %>
<% if (flash?.error) { %>
  <div id="errors" class="errors">
    <span><%= flash.error %></span>
  </div>
<% } %>
<article>
  <section class="main">
    <h2>Edit Point of Interest: <%= poi.properties.name %> </h2>
      
      <form id="poiEditId" name="poioEdit" action="<%= origin %>/edit/poi/<%= poi.properties.placeId %>" method="POST" enctype="multipart/form-data">
        <fieldset id="messagesId" name="messages" class="hidden" title="Update Results">
          <legend>Update Results</legend>
        </fieldset>
        <fieldset id="infoId" name="info" form="poiEditId" class="edit_fieldset" title="Meta Data">
          <legend>Meta Data</legend>
          <% if (poi?.updatedOn?.length > 0) { %>
            Updated on: <%= poi?.properties?.createdOn[0] %><br>
          <% } %>
          POI geojson schema version: <%= (poi?.properties?.version) ? poi.properties.version : '1' %>
          <br>
          <input id="versionId" name="version" type="hidden" value="<%= poi.properties.version %>">
          <input id="csrf-tokenId" type="hidden" value="<%= csrfToken %>">
          <label for="placeId">Place ID
            <input id="placeId" name="placeId" type="text" value="<%= poi?.properties?.placeId %>" tabindex=0>
          </label>
        </fieldset>
        <fieldset id="poiPhotoId" name="poiPhoto" form="poiEditId" class="edit_fieldset" title="POI Photo Form">
          <legend>POI Photo</legend>
          <% if (poi?.images?.length > 0) { %>
          <picture>
            <source media="(max-width:820px)" srcset="">
            <source media="(min-width:821px)" srcset="">
            <img alt="Photo of <%= poi?.properties.name %> in <%= town %>." src="<%= origin %>/<%= poi?.properties?.images[0] %>">
          </picture><br>
          <% } %>
          <span>Add an image for this POI.</span><br>
          <input id="photo_0Id" name="photo_0" type="file" accept=".png,.jpg,.jpeg" tabindex=0>
        </fieldset>
        <fieldset id="poiLocationId" name="poiLocation" form="poiEditId" class="edit_fieldset" title="POI Location Form">
          <legend>POI Location</legend>
          <label for="lonId">Longtitude</label>
          <input id="lonId" name="lon" type="number" value="<%= lon %>" min="-180.000000" max="180.000000" step="0.000001" required tabindex=0><br>
          <label for="latId">Latitude</label>
          <input id="latId" name="lat" type="number" value="<%= lat %>" min="-180.000000" max="180.000000" step="0.000001" required tabindex=0><br>
          <label for="geohashId">Geohash</label>
          <input id="geohashId" name="geohash" type="text" size="30" value="<%= poi?.properties?.geohash %>" tabindex=0><br>
          <label for="pluscodeId">Pluscode</label>
          <input id="pluscodeId" name="pluscode" type="text" size="30" value="<%= poi?.properties?.pluscode %>" tabindex=0><br>
        </fieldset>
        <fieldset id="poiTypeId" name="poiType" form="poiEditId" class="edit_fieldset" title="POI Type">
          <legend>POI Details</legend>
          <label for="poiNameId">Name</label>
          <input id="poiNameId" name="poiName" type="text" size="30" maxlength="100" value="<%= poi?.properties?.name%>" tabindex=0></br>
          <label>Type<br>
          <label for="type1Id" class="radioLabel">Access<input type="radio" id="type1Id" name="newPoiType" value="Access" style="margin-right: 10px" tabindex=0></label>
          <label for="type2Id" class="radioLabel">Restroom<input type="radio" id="type2Id" name="newPoiType" value="Restroom" style="margin-right: 10px" tabindex=0></label>
          <label for="type3Id" class="radioLabel">Food<input type="radio" id="type3Id" name="newPoiType" value="food" style="margin-right: 10px"></label>
          <label for="type4Id" class="radioLabel">Landmark<input type="radio" id="type4Id" name="newPoiType" value="Landmark" style="margin-right: 10px" tabindex=0></label><br>
          </label>
          <label for="poiDescriptionId">Description</label><br>
          <textarea id="poiDescriptionId" name="poiDescription" type="text" rows="10" cols="45" tabindex=0>
            <%= poi?.properties?.description%>
          </textarea>
        </fieldset>
        <fieldset id="poiAddressId" name="poiAddress" form="poiEditId" class="edit_fieldset" title="POI Address Form">
          <legend>POI Address</legend>
          <label for="telId">Telephone</label>
          <input id="telId" name="tel" type="tel" size="30" placeholder="123-456-7890" pattern="(?:\+1)?\(?\d{3}\)?(?:-| )\d{3}-\d{4}" title="Enter number as 123-456-7890" maxlength="15" value="<%= poi?.properties?.tel %>" tabindex=0>
          <br>
          <label for="streetId">Street</label>
          <input id="streetId" name="street" type="text" size="30" maxlength="70" value="<%= poi?.properties?.address?.street %>" tabindex=0>
          <br>
          <label for="cityId">City</label>
          <input id="cityId" name="city" type="text" size="30" maxlength="50" value="<%= poi?.properties?.address?.city %>" tabindex=0>
          <br>
          <label for="stateId">State</label>
          <input id="stateId" name="state" type="text" size="3" maxlength="2" value="<%= poi?.properties?.address?.state %>" tabindex=0>
          <br>
          <label for="zipId">Zip Code</label>
          <input id="zipId" name="zip" type="text" size="10" maxlength="9" value="<%= poi?.properties?.address?.zip %>" tabindex=0>
          <br>
          <label for="urlId">Web</label>
          <input id="urlId" name="url" type="text" size="45" maxlength="100" value="<%= poi?.properties?.url%>" tabindex=0>
          <br>
        </fieldset>
        <fieldset id="finishId" name="finish" form="poiEditId">
          <div style="display: inline-block; width: 45%; margin: auto; position: relative; text-align: left; padding-left: 10px;">
            <input type="submit" value="Submit" tabindex=0 /> 
          </div>
          <div style="display: inline-block; width: 50%; position: relative; right: 0px; text-align: right;">
            <input type="reset" value="Reset" tabindex=0 />
          </div>
        </fieldset>
      </form>
      <% if (photo) { %>
      <picture>
        <source media="(max-width:820px)" srcset="">
        <source media="(min-width:821px)" srcset="">
        <img alt="Photo of <%= poi?.name %> in <%= town %>." src="">
      </picture>
      <% } %>

    <script nonce="<%= nonce %>">
      const form = document.forms['poiEditId'] 
      const fileInput = form['photo_0']
      fileInput.addEventListener('change', handlePhoto, false)
      function handlePhoto(e) {
        e.preventDefault()
        e.stopPropagation()
        prepareNewImage(e)
      }
      const imageDropTarget = form['poiPhotoId']
      imageDropTarget.addEventListener('dragenter', dragnoop, false)
      imageDropTarget.addEventListener('dragover', dragnoop, false)
      imageDropTarget.addEventListener('drop', dragdrop, false)
      function dragnoop(e) {
        e.preventDefault()
        e.stopPropagation()
        // console.log(e)
      }
      function dragdrop(e) {
        e.preventDefault()
        e.stopPropagation()
        const files = e.dataTransfer.files
        const fileInput = form['photo_0Id']
        fileInput.files = files
        console.log(files)
        prepareNewImage(e) 
      }
      // const fileElement = document.forms[0]['photo_0Id'] 
      // fileElement.addEventListener('change', (e) => {
      //   e.preventDefault()
      //   e.stopPropagation()
      //   prepareNewImage(e)
      // })
      async function preparePoiData(e) {
        console.log('step 1: prepare form data')
        const lat = Number.parseFloat(form['latId'].value)
        const lon = Number.parseFloat(form['lonId'].value)
        const poi = {}
        poi.type = 'Feature'
        poi.geometry = {}
        poi.geometry.type = 'Point'
        poi.geometry.coordinates = [lon, lat]
        poi.properties = {}
        poi.properties.version = form['versionId'].value
        poi.properties.id = 4
        poi.properties.placeId = form['placeId'].value ?? ''
        poi.properties.geohash = form['geohashId'].value
        poi.properties.pluscode = form['pluscodeId'].value
        poi.properties.name = form['poiNameId'].value ?? ''
        poi.properties.type = form['newPoiType'].value
        poi.properties.description = form['poiDescriptionId'].value ?? ''
        poi.properties.tel = form['telId'].value.replace(
          /(?<area>\d{3})-(?<prefix>\d{3})-(?<exch>\d{4})/,
          '+1 ($<area>) $<prefix>-$<exch>'
        )
        const address = {}
        address.street = form['streetId'].value
        address.city = (form['cityId'].value !== '') ? form['cityId'].value : ''
        address.state = (form['stateId'].value !== '') ? form['stateId'].value : ''
        address.zip = (form['zipId'].value !== '') ? form['zipId'].value : ''
        poi.properties.address = address
        if (lon !== 0 && lat !== 0) {
          const locality = await myGeocoder({ lat, lon })
          console.log(locality)
        }
        console.log(poi)
        return poi 
      }

      function prepareNewImage() {
        const fileList = form['photo_0Id'].files
        if (arguments.length > 0) {
          const span = form['pierPhotoId'].querySelector(':scope > span')
          span.innerHTML = `Image selected for new point of interest<br>${fileList[0].name} <br>type: ${fileList[0].type} <br>${Math.floor(fileList[0].size/1024)} KBs.`
          console.log(span)
        } else {
          console.log('step 2: prepare new image')
          console.info(fileList[0])
          return fileList[0]
        }
      }

      async function send(data) {
        console.log('step 3: send data')
        let jwtAccess = '<%= searchJwtAccess %>'
        const opts = {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${jwtAccess}`,
          },
          body: data,
        }
        console.dir(opts)
        const url = new URL(`${origin}/edit/poi`)
        console.log(url.toString())
        const request = new Request(url, opts)
        console.dir(request)
        const response = await (await fetch(request, { credentials: 'same-origin' })).json()
        console.dir(response)
        const messagesId = document.forms[0].elements['messagesId']
        const messageSpan = document.createElement('span')
        if (/failed/.test(response.status.toLowerCase())) {
          messageSpan.appendChild(document.createTextNode(response.msg))
          messageSpan.appendChild(document.createElement('br'))
          messageSpan.appendChild(document.createTextNode(`pier update status: ${response.okPierUpdate}`))
          // messageSpan.appendChild(document.createElement('br'))
          // messageSpan.appendChild(document.createTextNode(`town geojson update status: ${response.okTownGeoJson}`))
          // messageSpan.appendChild(document.createElement('br'))
          // messageSpan.appendChild(document.createTextNode(`combined geojson update status: ${response.okCombinedGeoJson}`))
          // messageSpan.appendChild(document.createElement('br'))
          // messageSpan.appendChild(document.createTextNode(`image upload status: ${response.okPierImage}`))
        } else {
          messageSpan.appendChild(document.createTextNode('POI data successfully updated.'))
          messageSpan.appendChild(document.createElement('br'))
          messageSpan.appendChild(document.createTextNode(`image upload status: ${response?.imageUploadStatus}`))
          messageSpan.appendChild(document.createElement('br'))
        }
        messagesId.appendChild(messageSpan)
        messagesId.classList.remove('hidden')
        messagesId.scrollIntoView(true)
        document.querySelector('section.main h2').scrollIntoView(true)
      }

      const reset = document.querySelector('input[type=reset]')
      reset.addEventListener('click', resetPoi)
      async function resetPoi(e) {
        // window._map.annotations.forEach(a => a.selected = false)
        window._map.removeAnnotations(window._map.annotations)
      }
      const submit = document.querySelector('input[type=submit]')
      submit.addEventListener('click', submitEditPoi)
      async function submitEditPoi(e) {
        e.preventDefault()
        e.stopPropagation()
        const formData = new FormData()
        const poi = await preparePoiData(e)
        console.log('submitting poi', poi)
        const file = prepareNewImage()
        if (file !== undefined) {
          console.log(`files ready to be uploaded: ${file}`)
          formData.append('photo_0', file)
        }
        formData.append('csrfTokenHidden', form['csrf-tokenId'].value)
        formData.append('poi', JSON.stringify(poi))
        console.log(formData)
        await send(formData)
      }
      window.placeId = null
      // Event hander for lon/lat fields to get geohash
      async function getGeoHash(e) {
        const lon = parseFloat(form['lonId'].value, 10)
        const lat = parseFloat(form['latId'].value, 10)
        console.log(lon, lat)
        if ((lon === 0 || isNaN(lon)) || (lat === 0 || isNaN(lat))) {
        // if (lon === 0 || lat === 0) {
          return false
        }
        const data = new FormData()
        data.append('csrfTokenHidden', form['csrf-tokenId'].value)
        data.append('pier', form['numberId'].value)
        data.append('lon', lon.toString())
        data.append('lat', lat.toString())
        let jwtAccess = '<%= searchJwtAccess %>'
        const opts = {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${jwtAccess}`,
          },
          body: data,
        }
        console.dir(opts)
        const request = new Request(`${origin}/edit/geohash`, opts)
        console.dir(request)
        const response = await (await fetch(request, { credentials: 'same-origin' })).json()
        console.log(response)
        if (response?.geoHash !== 0) {
          form['geohash'].value = response.geoHash
          form['csrf-tokenId'].value = response.newCsrfToken
          console.log(`getGeoHash - New csrf token: ${response.newCsrfToken}`)
        }
        if (form['placeId'].value !== '' && form['placeId'] !== window?.placeId) {
          window.placeId = form['placeId'].value
          console.log('window.placeId', window.placeId)
          console.log('placeId', form['placeId'].value)
          const place = new window.mapkit.PlaceLookup({ language: 'en-US' })
          place.getPlace(
            form['placeId'].value,
            function(error, data) {
              if (error) {
                console.warn(error)
              }
              if (data) {
                console.log(data)
                const p = new window.mapkit.PlaceAnnotation(data)
                window._map.addItems([p])
                const accessory = new mapkit.PlaceSelectionAccessory()
                p.selectionAccessory = accessory
              }
            }
          ) 
        } else {
          const result = await myGeocoder({ lon, lat })
          let query
          switch(form['newPoiType'].value) {
            case 'Access':
              query = [
                window.mapkit.PointOfInterestCategory.ATM,
                window.mapkit.PointOfInterestCategory.Beach,
                window.mapkit.PointOfInterestCategory.Campground,
                window.mapkit.PointOfInterestCategory.Marina,
                window.mapkit.PointOfInterestCategory.Park,
                window.mapkit.PointOfInterestCategory.Parking,
              ]
              break
            case 'Restroom':
              query = [
                window.mapkit.PointOfInterestCategory.Restroom,
              ]
              break
            case 'food':
              query = [
                window.mapkit.PointOfInterestCategory.Cafe,
                window.mapkit.PointOfInterestCategory.FoodMarket,
                window.mapkit.PointOfInterestCategory.Restaurant,
              ]
              break
            case 'Landmark':
              query = [
                window.mapkit.PointOfInterestCategory.Landmark,
              ]
              break
            default:
              query = [
                window.mapkit.PointOfInterestCategory.ATM,
                window.mapkit.PointOfInterestCategory.Beach,
                window.mapkit.PointOfInterestCategory.Cafe,
                window.mapkit.PointOfInterestCategory.Campground,
                window.mapkit.PointOfInterestCategory.FoodMarket,
                window.mapkit.PointOfInterestCategory.Landmark,
                window.mapkit.PointOfInterestCategory.Library,
                window.mapkit.PointOfInterestCategory.Marina,
                window.mapkit.PointOfInterestCategory.Museum,
                window.mapkit.PointOfInterestCategory.Park,
                window.mapkit.PointOfInterestCategory.Parking,
                window.mapkit.PointOfInterestCategory.Restaurant,
                window.mapkit.PointOfInterestCategory.Restroom,
                window.mapkit.PointOfInterestCategory.University,
              ]
          }
          console.log('myGeocoder - query', query)
          await mySearch(
            { lon, lat },
            query,
          )
        }
      }
      form['lonId'].addEventListener('change', getGeoHash, false)
      form['latId'].addEventListener('change', getGeoHash, false)
      // Event handler for lon/lat fields to get google pluscode
      async function getPluscode(e) {
        const lon = parseFloat(form['lonId'].value, 10)
        const lat = parseFloat(form['latId'].value, 10)
        if ((lon === 0 || isNaN(lon)) || (lat === 0 || isNaN(lat))) {
          return false
        }
        const request = new Request(`https://plus.codes/api?address=${lat},${lon}`)
        const response = await (await fetch(request)).json()
        console.log(response)
        if (response?.plus_code?.global_code !== '') {
          form['pluscodeId'].value = response.plus_code.global_code
        }
      }
      form['lonId'].addEventListener('change', getPluscode, false)
      form['latId'].addEventListener('change', getPluscode, false)
      async function myGeocoder(coords) {
        return new Promise((resolve, reject) => {
          // console.log('geocoder with:', coords)
          const opts = {
            getsUserLocation: false,
            language: 'en-US',
          }
          const geocoder = new window.mapkit.Geocoder(opts)
          // console.log('myGeocoder', geocoder)
          const reverseLookup = geocoder.reverseLookup(
            new window.mapkit.Coordinate(coords.lat, coords.lon),
            function(error, data) {
            if (error) {
              console.warn('myGeocoder', error)
            }
            if (data && data.results.length > 0) {
              console.log('myGeocoder', data)
              resolve(data.results[0])
            }
          })
        })
      }
      async function mySearch(coords, query) {
        return new Promise((resolve, reject) => {
          const opts = {
            language: 'en-US',
            region: new window.mapkit.CoordinateRegion(
              new window.mapkit.Coordinate(coords.lat, coords.lon),
              new window.mapkit.CoordinateSpan(0.001, 0.001)
            ),
            pointOfInterestFilter: window.mapkit.PointOfInterestFilter.including(query),
          }
          const access = ['ATM','Beach','Campground','Marina','Park','Parking']
          const restroom = ['Restroom'] 
          const food = ['Cafe', 'FoodMarket',' Restaurant'] 
          const historical = []              
          console.log('mySearch', opts)
          const search = new window.mapkit.PointsOfInterestSearch()
          const results = search.search(
            function(error, data) {
              if (error) {
                console.warn('mySearch', error)
              } else {
                console.log('mySearch', data)
                if (data && data.places.length > 0) {
                  const radio = document.forms[0]['newPoiType'].value
                  let placeId
                  let placeName
                  let placeUrl
                  data.places.forEach((p) => {
                    // const result = data.places[0]
                    const result = p
                    placeId = result.id ?? ''
                    placeUrl = result.urls[0] ?? ''
                    placeName = result.name ?? ''
                    
                    const reg = /^(\+1)?(?<ac>\d{3})(?<pre>\d{3})(?<ext>\d{4})$/
                    function replacer(match, ...args) {
                      return `(${args.at(-1).ac})-${args.at(-1).pre}-${args.at(-1).ext}`
                    }
                    form['telId'].value = result?.telephone?.replace(reg, replacer) ?? ''
                    form['streetId'].value = result.fullThoroughfare ?? ''
                    form['cityId'].value = result.locality ?? ''
                    form['stateId'].value = result.administrativeAreaCode ?? ''
                    form['zipId'].value = result.postCode ?? ''
                    form['urlId'].value = result.urls[0] ?? placeUrl ?? ''
                    form['placeId'].value = result.id ?? placeId ?? ''
                    form['poiNameId'].value = result.name ?? placeName ?? ''
                  })
                  const place = new window.mapkit.PlaceAnnotation(data.places[0])
                  window._map.addItems([place])
                  const accessory = new mapkit.PlaceSelectionAccessory()
                  place.selectionAccessory = accessory
                }
                resolve(data)
              }
            },
            opts 
          )
        })
      }
    </script>
  </section> 
  <section class="map">
    <%# map embed %>
    <%- await include('./map-embed.ejs') -%>
    <%# map embed %>
    <script nonce="<%= nonce %>"
      src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
      crossorigin async
      data-callback="initMapKit"
      data-libraries="services,full-map"
      data-initial-token="">
    </script>
    <script nonce="<%= nonce %>" type="module">
      let page = 'poi/edit'

      const origin = '<%= origin %>'
      const jwtAccess = '<%= searchJwtAccess %>'     
      let map
      async function setupMapKitJs() {
        const tokenOpts = {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${jwtAccess}`,
          },
        }
        const request = new Request(`${origin}/mapkit/getToken`, tokenOpts)
        const response = await fetch(request)
        const { tokenID } = await response.json()
        // console.log('tokenID: ', tokenID)
        if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
          // mapkit.core.js or the libraries are not loaded yet.
          // Set up the callback and wait for it to be called.
          await new Promise(resolve => { window.initMapKit = resolve })
          // Clean up
          delete window.initMapKit
        }
        mapkit.init({
          authorizationCallback: function(done) {
            done(tokenID)
          },
        })
      }

      async function main() {
        await setupMapKitJs()
        // init / center the map over Geneva Bay 
        const lat = 42.587751
        const lon = -88.440669
        const genevaBay = new mapkit.CoordinateRegion(
          new mapkit.Coordinate(lat, lon),
          new mapkit.CoordinateSpan(0.006, 0.001)
        )
        window._lat = lat
        window._lon = lon
        const opts = {
          mapType: mapkit.Map.MapTypes.Satellite,
          loadPriority: mapkit.Map.LoadPriorities.PointsOfInterest,
          selectableMapFeatures: [
            mapkit.MapFeatureType.PhysicalFeature,
            mapkit.MapFeatureType.PointOfInterest,
          ],
          visibleMapRect: new mapkit.MapRect(0, 0, 1, 1),
          showsCompass: mapkit.FeatureVisibility.Visible,
          showsScale: mapkit.FeatureVisibility.Visible,
          showsZoomControl: true,
          showsPointsOfInterest: true,
          showsMapTypeControl: false,
          cameraDistance: 1000,
          isRotationEnabled: true,
          isScrollEnabled: true,
          isZoomEnabled: true,
        } 
        window._map = new mapkit.Map("map", opts);
        window._map.region = genevaBay;
      }
      await main()

      let pierNumber = '<%= poi?.pier %>'
      lon = parseFloat(lon, 10)
      lat = parseFloat(lat, 10)

      async function showThisPoi() {
        const annotations = []
        if (lat !== 0 && lon !== 0) {
          console.log(`(lat, lon): ${lat}, ${lon}`)
          const pierMarker = new window.mapkit.Coordinate(lat, lon)
          const pierAnnotation = new window.mapkit.MarkerAnnotation(pierMarker)
          pierAnnotation.title = `Pier ${pierNumber}`
          annotations.push(pierAnnotation)
        }
        if (annotations.length > 0) {
          // console.dir(annotations, { depth: null })
          window._map.showItems(annotations)
        }
      }
      await showThisPoi()
      let selectCoordsMarker = null
      window._map.addEventListener("single-tap", async (e) => {
        if (selectCoordsMarker) {
          window._map.removeAnnotation(selectCoordsMarker)
        }
        e.preventDefault()
        e.stopPropagation()
        const {latitude, longitude} = window._map.convertPointOnPageToCoordinate(e.pointOnPage)
        const defaultRadius = 50
        const defaultUnits = 'ft'
        console.log(`locate piers within ${defaultRadius} ${defaultUnits} `
          + `of coords: ${longitude}, ${latitude}`)
        const results = await (
          await fetch(
            `${origin}/mapkit/locate/${longitude}/${latitude}/${defaultRadius}/${defaultUnits}`
          )
        ).json()
        console.log(results)
        if (results?.total > 0) {
          results.documents.forEach((p) => {
            console.log(p)
              let subtitle = ' '
              console.info(`subtitle: ${subtitle}`)
              const annotationCallout = {
                calloutLeftAccessoryForAnnotation: () => {
                  const accessoryViewLeft = document.createElement("div")
                  return accessoryViewLeft
                },
                calloutRightAccessoryForAnnotation: () => {
                  const accessoryViewRight = document.createElement("a")
                  accessoryViewRight.className = "right-accessory-view"
                  accessoryViewRight.href = `${origin}/pier/${p.value.pier}`
                  accessoryViewRight.target = "_self"
                  accessoryViewRight.textContent = "\u{24D8}"
                  return accessoryViewRight
                }
              }
              const poiMarker = new window.mapkit.Coordinate(latitude, longitude)
              const poiAnnotation = new window.mapkit.MarkerAnnotation(poiMarker)
              poiAnnotation.title = `Poi ${p.value.pier}`
              poiAnnotation.subtitle = subtitle 
              poiAnnotation.animates = true
              poiAnnotation.selected = true
              poiAnnotation.color = "#4B93E0"
              poiAnnotation.callout = annotationCallout
              window._map.addAnnotation(poiAnnotation)
          })
        } else {
          console.log(`pointOnPageToCoordinate... lon: ${longitude}, lat: ${latitude}`)
          const annotationCallout = {
            calloutLeftAccessoryForAnnotation: () => {
              const accessoryViewLeft = document.createElement("div")
              return accessoryViewLeft
            },
            calloutRightAccessoryForAnnotation: () => {
              const accessoryViewRight = document.createElement("a")
              // accessoryViewRight.className = "right-accessory-view"
              // accessoryViewRight.href = `${origin}/pier/${p.value.pier}`
              // accessoryViewRight.target = "_self"
              // accessoryViewRight.textContent = `lon/lat: ${longitude},${latitude}`
              return accessoryViewRight
            }
          }
          const selectCoords = new window.mapkit.Coordinate(latitude, longitude)
          selectCoordsMarker = new window.mapkit.MarkerAnnotation(selectCoords)
          selectCoordsMarker.title = `lon/lat: `
            + `${Number.parseFloat(longitude).toFixed(6)},`
            + `${Number.parseFloat(latitude).toFixed(6)}`
          selectCoordsMarker.animates = true
          selectCoordsMarker.selected = true
          selectCoordsMarker.color = "#4B93E0"
          selectCoordsMarker.callout = annotationCallout
          // window._map.addAnnotation(selectCoordsMarker)
          document.forms.poiEditId.lonId.value = Number.parseFloat(longitude).toFixed(6)
          document.forms.poiEditId.latId.value = Number.parseFloat(latitude).toFixed(6)
          document.forms.poiEditId.latId.dispatchEvent(new InputEvent('change'))
          if (window?.placeId && window.placeId !== '') {
            document.forms.poiEditId.placeId.value = ''
          }
          document.forms.poiEditId.latId.dispatchEvent(new InputEvent('change'))
        }
      })
    </script>
  </section>
</article>

