<% if (flash?.info) { %>
  <div id="info" class="info">
    <span><%= flash.info %></span>
  </div>
<% } %>
<% if (flash?.message) { %>
  <div id="messages" class="messages">
    <span><%= flash.message %></span>
  </div>
<% } %>
<% if (flash?.error) { %>
  <div id="errors" class="errors">
    <span><%= flash.error %></span>
  </div>
<% } %>
<article>
  <section class="main">
    <div class="previousPier">
      <!-- a rel="prev" href="/pois/list">&lt; Edit POIs</a -->
    </div>
    <div class="nextPier">
      <a rel="next" href="/poi/new" style="float: right;">New POI &gt;</a>
    </div>
    <h2><%= total %> Point<%= (total != 1) ? 's' : '' %> of Interest</h2>

    <div class="previousAssocs" <%- (total < num) ? 'style="display: none;"' : '' %>>
      <% if (skipBack > 1) { %>
        <a rel="prev" href="<%= origin %>/points-of-interest?s=<%= skipBack %>">&lt; Prev</a>
      <% } else if (skipBack === 1) { %>
      <a href="/points-of-interest">&lt; Prev</a>
      <% } else { %>
      < Prev 
      <% } %>
    </div>
    <div class="nextAssocs" <%- (total < num) ? 'style="display: none;"' : '' %>>
      <% if ((offset + num) < total) { %>
      <a rel="next" href="<%= origin %>/points-of-interest?s=<%= skipForward %>">Next &gt;</a>
      <% } else { %>
      Next > 
      <% } %>
    </div>

    <ul id="resultsList" class="searchResults">
      <% pois?.results.forEach((poi, i) => {
        let p
        if (poi.extra_attributes) {
          if (typeof poi.extra_attributes['$'] === 'string') {
            const _p = JSON.parse(poi.extra_attributes['$'])
            poi.extra_attributes['$'] = _p
          }
          p = {
            value: {
              properties: {
                id: poi.extra_attributes['$'].properties.id,
                placeId: poi.extra_attributes['$'].properties.placeId,
                name: poi.extra_attributes['$'].properties.name,
              },
            }
          }
        } else {
          p = poi
        }
        console.log(p)
      %>
        <li><a 
            href="/edit/poi/<%= encodeURI(p.value.properties.placeId) %>"
            data-id="<%= encodeURI((p.value.properties.id + '').padStart(3, 0)) %>"
            data-placeId="<%= p.value.properties.placeId %>"><%= p.value.properties.name%></a></li>
      <% }) %>
    </ul>
    <script nonce="<%= nonce %>">
      let origin = '<%= origin %>'
      let jwtAccess = '<%= searchJwtAccess %>'
      let num = <%= num %>
      let params = new URLSearchParams(document.location.search)
      let s = params.get('s') || 1
      console.log(`query param s: ${s}`)
      let ulResultsList = document.querySelector('ul#resultsList')
      // const previousDiv = document.querySelector('div.previousPier')
      const previousDiv = document.querySelector('div.previousAssocs')
      let previousLink = (previousDiv.children)[0]
      
      function updatePrevLink(len) {
        if (s <= 1) {
          previousDiv.replaceChildren(document.createTextNode('< Prev'))
        } else {
          const newHref = nextLink.href.replace(/(\d)/, s - 1)
          previousLink.href = newHref
        }
        // console.info(`Previous link: ${document.querySelector('a[rel=prev]')?.href}`)
      }
      function updateNextLink(len) {
        if (len < num) {
          nextLink = undefined
          nextDiv.replaceChildren(document.createTextNode('Next >'))
        } else {
          // const matchS = getS(nextLink.href)
          const matchS = s
          const newHref = nextLink.href.replace(/(\d)/, matchS + 1)
          nextLink.href = newHref
        }
        // console.info(`2 Next link: ${nextLink}`)
      }
      // Add Event Listeners to < Prev and Next > links
      if (previousLink?.tagName === 'A') {
        // console.log(`previousLink ${previousLink}`)
        previousLink.addEventListener('click', setAndUpdatePrevNextLinks)
      }
      // const nextDiv = document.querySelector('div.nextPier')
      const nextDiv = document.querySelector('div.nextAssocs')
      let nextLink = (nextDiv.children)[0]
      if (nextLink?.tagName === 'A') {
        // console.log(`nextLink ${nextLink}`)
        nextLink.addEventListener('click', setAndUpdatePrevNextLinks)
      }
      async function setAndUpdatePrevNextLinks(e) {
        e.preventDefault()
        e.stopPropagation()
        if (previousLink === undefined) {
          console.log(`recreating previousLink: ${previousLink}`)
          previousLink = document.createElement('a')
          previousLink.setAttribute('rel', 'prev')
          previousLink.href = `${origin}/points-of-interest?s=1`
          previousLink.innerText = '< Prev'
          previousDiv.replaceChildren()
          previousDiv.appendChild(previousLink)
          previousLink.addEventListener('click', setAndUpdatePrevNextLinks)
        }
        if (nextLink === undefined) {
          console.log(`recreating nextLink: ${nextLink}`)
          nextLink = document.createElement('a')
          nextLink.setAttribute('rel', 'next')
          nextLink.href = `${origin}/points-of-interest?s=${s}`
          nextLink.innerText = 'Next >'
          nextDiv.replaceChildren()
          nextDiv.appendChild(nextLink)
          nextLink.addEventListener('click', setAndUpdatePrevNextLinks)
        }
        const rel = e.target.getAttribute('rel') 
        s = (rel === 'prev') ? parseInt(s) - 1 : parseInt(s) + 1
        // console.info(`rel: ${rel}, s: ${s}`)
        const links = await getAssocs(s)
        console.log(links)
        if (links.length > 0) {
          updatePrevLink()
          console.info(`rel: ${rel}, s: ${s}`)
          // console.info(`current s: ${s}`)
          updateNextLink(links.length)
          ulResultsList.replaceChildren()
          links.forEach((p) => {
            const li = document.createElement('li')
            li.innerHTML = `<a href="${origin}/point-of-interest/${encodeURI(p.properties.id)}" `
              + `data-id='${p.properties.id}'>${p.properties.name}</a>`
            li.firstChild.addEventListener('mouseover', linkAnnotationHandler)
            ulResultsList.appendChild(li)
          })
        }
        return false
      }
      document.querySelectorAll('a[data-placeId]').forEach((a) => {
        a.addEventListener('mouseover', linkAnnotationHandler)
      })
      function linkAnnotationHandler(e) {
        deselectAnnotations()
        e.preventDefault()
        e.stopPropagation()
        console.log(e.target.dataset)
        const placeId = e.target.dataset.placeid
        const annotation = window._map.annotations.find((a) => a._impl._place.id === placeId)
        if (annotation) {
          console.log(annotation)
          annotation.selected = true
        }
      }
      function deselectAnnotations(annotations = null) {
        let annos
        if (!annotations) {
          annos = window._map.annotations
        } else if (Array.isArray(annotations)) {
          annos = annotations
        } else if (typeof _map.annotations[0] === 'object'
          && _map.annotations[0]._impl._position) {
          annos = [annotation]
        }
        if (annos.length > 0) {
          annos.forEach((a) => a.selected = false)
          return true
        }
        return false
      }
      async function getAssocs(skip) {
        const opts = {
           method: 'GET',
           headers: {
             Accept: 'application/json',
             Authorization: `Bearer ${jwtAccess}`,
           },
        }
        const request = new Request(`${origin}/points-of-interest?s=${skip}`, opts)
        let json
        try {
          const response = await fetch(request)
          json = await response.json()
        } catch (e) {
          console.error(e)
        }
        return json
      }
    </script>
  </section>
  <section class="map">
    <%# map embed %>
    <%- await include('./map-embed.ejs') -%>
    <%# map embed %>
    <script nonce="<%= nonce %>"
      src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
      crossorigin async
      data-callback="initMapKit"
      data-libraries="services,full-map"
      data-initial-token="">
    </script>
    <script nonce="<%= nonce %>" type="module">
      let page = 'points-of-interest'

      const origin = '<%= origin %>'
      const jwtAccess = '<%= searchJwtAccess %>'     
      let map
      async function setupMapKitJs() {
        const tokenOpts = {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${jwtAccess}`,
          },
        }
        const request = new Request(`${origin}/mapkit/getToken`, tokenOpts)
        const response = await fetch(request)
        const { tokenID } = await response.json()
        // console.log('tokenID: ', tokenID)
        if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
          // mapkit.core.js or the libraries are not loaded yet.
          // Set up the callback and wait for it to be called.
          await new Promise(resolve => { window.initMapKit = resolve })
          // Clean up
          delete window.initMapKit
        }
        mapkit.init({
          authorizationCallback: function(done) {
            done(tokenID)
          },
        })
      }

      async function main() {
        await setupMapKitJs()
        // init / center the map over Geneva Bay 
        const lat = 42.587751
        const lon = -88.440669
        const genevaBay = new mapkit.CoordinateRegion(
          new mapkit.Coordinate(lat, lon),
          new mapkit.CoordinateSpan(0.006, 0.001)
        )
        window._lat = lat
        window._lon = lon
        const opts = {
          mapType: mapkit.Map.MapTypes.Satellite,
          loadPriority: mapkit.Map.LoadPriorities.PointsOfInterest,
          selectableMapFeatures: [
            mapkit.MapFeatureType.PhysicalFeature,
            mapkit.MapFeatureType.PointOfInterest,
          ],
          visibleMapRect: new mapkit.MapRect(0, 0, 1, 1),
          showsCompass: mapkit.FeatureVisibility.Visible,
          showsScale: mapkit.FeatureVisibility.Visible,
          showsZoomControl: true,
          showsPointsOfInterest: true,
          showsMapTypeControl: false,
          cameraDistance: 1000,
          isRotationEnabled: true,
          isScrollEnabled: true,
          isZoomEnabled: true,
        } 
        window._map = new mapkit.Map("map", opts)
        window._map.region = genevaBay
      }
      await main()

      const annotations = []

      async function showPointsOfInterest() {
        try {
          const opts = {
            method: 'GET',
            headers: {
              Accept: 'application/json',
              Authorization: `Bearer ${jwtAccess}`,
            },
          }
          const request = new Request(`${origin}/mapkit/walking-path-pois`, opts)
          const response = await (await fetch(request)).json()
          console.log(response)
          response.documents.forEach((m) => {
            // console.log('m', m)
            let [lon, lat] = m.value.geometry.coordinates
            lon = parseFloat(lon, 10)
            lat = parseFloat(lat, 10)
            let places = []
            if (lat !== 0 && lon !== 0) {
              if (m.value.properties?.placeId && m.value.properties.placeId !== '') {
                const place = new window.mapkit.PlaceLookup({ language: 'en-US' })
                place.getPlace(
                  m.value.properties.placeId,
                  function(error, data) {
                    if (error) {
                      console.warn(error)
                    }
                    if (data) {
                      console.log('data', data)
                      const p = new window.mapkit.PlaceAnnotation(data)
                      console.log('p', p)
                      window._map.addItems([p])
                      const accessory = new mapkit.PlaceSelectionAccessory()
                      p.selectionAccessory = accessory
                    }
                  }
                )
              }
            }
          })
        } catch (e) {
          console.error(e)
        }
      }
      await showPointsOfInterest()

      window._map.addEventListener("single-tap", async (e) => {
        e.preventDefault()
        e.stopPropagation()
        const {latitude, longitude} = window._map.convertPointOnPageToCoordinate(e.pointOnPage)
        const defaultRadius = 50
        const defaultUnits = 'ft'
        console.log(`locate piers within ${defaultRadius} ${defaultUnits} of coords: `
          + `${longitude}, ${latitude}`)
        const results = await (
          await fetch(
            `${origin}/mapkit/locate/${longitude}/${latitude}/${defaultRadius}/${defaultUnits}`
          )
        ).json()
        console.log(results)
        if (results?.total > 0) {
          results.documents.forEach((p) => {
            console.log(`${p.value?.poi}, ${p.value?.coords}, ${p.value?.estateName}, `
              + `${p.value?.business}, ${p.value?.association}`)
            let subtitle = ' '
            if (p.value.business !== '' && p.value.association === '') {
              subtitle = p.value.business
            }
            if (p.value.association !== '' && p.value.business === '') {
              subtitle = p.value.association
            }
            if (p.value.firstname !== '' && p.value.lastname !== '') {
              subtitle = `${p.value.firstname} ${p.value.lastname}`
            }
            if (p.value.firstname !== '' && p.value.lastname === '') {
              subtitle = p.value.firstname
            }
            if (p.value.firstname === '' && p.value.lastname !== '') {
              subtitle = p.value.lastname
            }
            if (p.value.estateName !== '') subtitle = p.value.estateName
            console.info(`subtitle: ${subtitle}`)
            const annotationCallout = {
              calloutLeftAccessoryForAnnotation: () => {
                const accessoryViewLeft = document.createElement("div")
                return accessoryViewLeft
              },
              calloutRightAccessoryForAnnotation: () => {
                const accessoryViewRight = document.createElement("a")
                accessoryViewRight.className = "right-accessory-view"
                accessoryViewRight.href = `${origin}/pier/${p.value.pier}`
                accessoryViewRight.target = "_self"
                accessoryViewRight.textContent = "\u{24D8}"
                return accessoryViewRight
              }
            }
            const pierMarker = new window.mapkit.Coordinate(latitude, longitude)
            const pierAnnotation = new window.mapkit.MarkerAnnotation(pierMarker)
            pierAnnotation.title = `Pier ${p.value.pier}`
            pierAnnotation.subtitle = subtitle 
            pierAnnotation.animates = true 
            pierAnnotation.selected = false
            pierAnnotation.color = "#4B93E0"
            pierAnnotation.callout = annotationCallout
            window._map.addAnnotation(pierAnnotation)
          })
          window._map.region = window.genevaCenter
          window._map.cameraDistance = window.cameraDistance
        }
      })
    </script>
  </section>
</article>

