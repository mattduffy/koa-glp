<% if (flash?.info) { %>
  <div id="info" class="info">
    <span><%= flash.info %></span>
  </div>
<% } %>
<% if (flash?.message) { %>
  <div id="messages" class="messages">
    <span><%= flash.message %></span>
  </div>
<% } %>
<% if (flash?.error) { %>
  <div id="errors" class="errors">
    <span><%= flash.error %></span>
  </div>
<% } %>
<article>
  <section class="main">
    <h2>Walking Path of Geneva Lake</h2>

    <% /* %>
    <div class="previousPier">
      <% if (skipBack > 1) { %>
      <a href="/pois?s=<%= skipBack %>">&lt; Prev</a>
      <% } else if (skipBack === 1) { %>
      <a href="/pois">&lt; Prev</a>
      <% } else { %>
      < Prev 
      <% } %>
    </div>
    <div class="nextPier">
      <% if ((offset + num) < total) { %>
      <a href="/pois?s=<%= skipForward %>">Next &gt;</a>
      <% } else { %>
      Next > 
      <% } %>
    </div>
    <% */ %>
    <% if (pois?.results) { %>
    <ul id="resultsList" class="searchResults">
      <% console.log(pois) %>
      <% pois?.results?.forEach((p, i) => {
        let a = `<li><a href="${origin}/point-of-interest/${p.name}">${p.name}</a></li>`  %>
      <%- a %>
    <% }) %>
    </ul>
    <% } %>
    <p style="font-size: .9em;">
      Tap buttons to see points of interest along the walking path.
    </p>
    <div id="poiTypes" class="poiButtons">
      <span id="restrooms" class="restrooms" data-type='restrooms' data-n=0>Restrooms 
        <span></span>
      </span>
      <span id="access" class="access" data-type='access' data-n=0>Access 
        <span></span>
      </span>
      <span id="food" class="food" data-type='food' data-n=0>Food 
        <span></span>
      </span>
      <span id="landmarks" class="landmarks" data-type='landmarks' data-n=0>Landmarks 
        <span></span>
      </span>
    </div>
  </section>
  <section class="map">
    <%# map embed %>
    <%- await include('./map-embed.ejs') -%>
    <%# map embed %>
    <script nonce="<%= nonce %>"
      src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
      crossorigin async
      data-callback="initMapKit"
      data-libraries="full-map,services,geojson,overlays"
      data-initial-token="">
    </script>
    <script nonce="<%= nonce %>" type="module">
      let page = 'walking-path'
      const origin = '<%= origin %>'
      const jwtAccess = '<%= searchJwtAccess %>'     
      let map
      async function setupMapKitJs() {
        const tokenOpts = {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${jwtAccess}`,
          },
        }
        const request = new Request(`${origin}/mapkit/getToken`, tokenOpts)
        const response = await fetch(request)
        const { tokenID } = await response.json()
        if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
          // mapkit.core.js or the libraries are not loaded yet.
          // Set up the callback and wait for it to be called.
          await new Promise(resolve => { window.initMapKit = resolve })
          // Clean up
          delete window.initMapKit
        }
        mapkit.init({
          authorizationCallback: function(done) {
            done(tokenID)
          },
        })
        let lat, lon
        if (window.innerWidth < 450) {
          // center on Geneva Bay for small screens
          // -88.44350141271971, 42.57864224253392
          lat = 42.57864224253392
          lon = -88.44350141271971
          window.genevaBay = new mapkit.CoordinateRegion(
            new mapkit.Coordinate(lat, lon),
            new mapkit.CoordinateSpan(0.015, 0.02)
          )
          window.cameraDistance = 1500
          console.log(`small screen (${window.innerWidth} x ${window.innerHeight}), `
           + `camera distance: ${cameraDistance}`)
        } else {
          // center the map over Geneva Lake for big screens
          // -88.500361383511, 42.566809828133316
          lat = 42.56798979707351
          lon = -88.500361383511
          window.genevaBay = new mapkit.CoordinateRegion(
            new mapkit.Coordinate(lat, lon),
            new mapkit.CoordinateSpan(0.1, 0.1)
          )
          window.cameraDistance = 9000
          console.log(`larger screen (${window.innerWidth} x ${window.innerHeight}), `
           + `camera distance: ${cameraDistance}`)
        }
        // console.log(genevaBay)
      }
      
      async function main() {
        await setupMapKitJs()
        const opts = {
          mapType: mapkit.Map.MapTypes.Hybrid,
          loadPriority: mapkit.Map.LoadPriorities.PointsOfInterest,
          selectableMapFeatures: [
            mapkit.MapFeatureType.PhysicalFeature,
            mapkit.MapFeatureType.PointOfInterest
          ],
          visibleMapRect: new mapkit.MapRect(0, 0, 1, 1),
          showsCompass: mapkit.FeatureVisibility.Visible,
          showsScale: mapkit.FeatureVisibility.Visible,
          showsZoomControl: true,
          showsPointsOfInterest: true,
          showsMapTypeControl: false,
          cameraDistance: window.cameraDistance,
          isRotationEnabled: true,
          isScrollEnabled: true,
          isZoomEnabled: true,
        } 
        window.map = new mapkit.Map('map', opts)
        window.map.region = window.genevaBay
        window.map.cameraDistance = window.cameraDistance
      }
      await main()
      const annotations = []

      async function showWalkingPath() {
        try {
          const opts = {
            method: 'GET',
            headers: {
              Accept: 'application/json',
              Authorization: `Bearer ${jwtAccess}`,
            },
          }
        const request = new Request(`${origin}/mapkit/walking-path`, opts)
          const response = await (await fetch(request)).json()
          // console.log(response)
          window.mapkit.importGeoJSON(response, {
            itemForFeature: (overlay, geoJSON) => {
              overlay.style = new window.mapkit.Style({
                lineWidth: 1.5,
                lineJoin: "round",
                lineDash: [],
                strokeColor: "royalblue",
              })
              return overlay
            },
            geoJSONDidComplete: overlays => {
              window.map.showItems(overlays)
              window.map.cameraDistance = window.cameraDistance
              window.map.region = window.genevaBay
            },
          })
        } catch (e) {
          console.error(e)
        }
        await showWalkingPathMileMarkers()
      }
      await showWalkingPath()

      async function showWalkingPathMileMarkers() {
        const annotations = []
        const miles = <%- JSON.stringify(mileMarkers) %>
        miles.forEach((mile) => {
          let m
          if (mile.extra_attributes) {
            m = {
              value: JSON.parse(mile.extra_attributes.$),
            }
          } else {
            m = mile
          }
          console.log(m.value.properties.name, m.value.properties.waypoint)
          let [lon, lat] = m.value.geometry.coordinates
          lon = parseFloat(lon, 10)
          lat = parseFloat(lat, 10)
          const coordinate = new mapkit.Coordinate(lat, lon)
          const annotationCallout = {
            calloutLeftAccessoryForAnnotations: () => {
              const accessoryViewLeft = document.createElement("div")

              return accessoryViewLeft
            },
            calloutRightAccessoryForAnnotation: () => {
               const accessoryViewRight = document.createElement('div')
               return accessoryViewRight
            }
          }
          const annotation  = new mapkit.MarkerAnnotation(coordinate, {
            title: m.value.properties.name,
            subtitle: '',
            animates: true,
            selected: false,
            color: 'royalblue',
            callout: annotationCallout,
          })
          annotations.push(annotation)
        })
        window.map.showItems(annotations.reverse())
        window.map.cameraDistance = window.cameraDistance
        window.map.region = window.genevaBay
        await showPointsOfInterest()
      }
      window._access = []
      window._food = []
      window._restrooms = []
      window._landmarks = []
      window._default = []
      async function showPointsOfInterest() {
        try {
          const opts = {
            method: 'GET',
            headers: {
              Accept: 'application/json',
              Authorization: `Bearer ${jwtAccess}`,
            },
          }
          const request = new Request(`${origin}/mapkit/walking-path-pois`, opts)
          const response = await (await fetch(request)).json()
          // console.log(response)
          const access = document.querySelector("span[data-type='access']")
          const food = document.querySelector("span[data-type='food']")
          const landmarks = document.querySelector("span[data-type='landmarks']")
          const restrooms = document.querySelector("span[data-type='restrooms']")
          response.documents.forEach((m) => {
            // console.log('m', m)
            let [lon, lat] = m.value.geometry.coordinates
            lon = parseFloat(lon, 10)
            lat = parseFloat(lat, 10)
            let places = []
            if (lat !== 0 && lon !== 0) {
              if (m.value.properties?.placeId && m.value.properties.placeId !== '') {
                const place = new window.mapkit.PlaceLookup({ language: 'en-US' })
                place.getPlace(
                  m.value.properties.placeId,
                  function(error, data) {
                    if (error) {
                      console.warn(error)
                      console.warn(m.value.properties.placeId)
                    }
                    if (data) {
                      // console.log('data', data)
                      if (m.value.properties.name) {
                        data.name = m.value.properties.name
                      }
                      if (m.value.properties.tel) {
                        data.telephone = m.value.properties.tel
                      }
                      if (m.value.properties.url) {
                        data.urls[0] = m.value.properties.url
                      }
                      if (m.value.properties.type !== data.pointOfInterestCategory) {
                        data.pointOfInterestCategory = m.value.properties.type
                      }
                      // console.log('data improved', data)
                      const p = new window.mapkit.PlaceAnnotation(data)
                      const accessory = new mapkit.PlaceSelectionAccessory()
                      p.selectionAccessory = accessory
                      // console.log('p', p)
                      // window.map.addItems([p])
                      switch (m.value.properties.type) {
                        case 'Access':
                          window._access.push(p)
                          access.dataset.n = parseInt(access.dataset.n) + 1
                          if (!access.style.display) {
                            access.style.display = 'inline'
                            access.firstElementChild.textContent = 1
                          } else {
                            access.firstElementChild.textContent = (Number.parseInt(
                              access.firstElementChild.textContent, 10) + 1)
                          }
                          break     
                        case 'Food':
                          food.dataset.n = parseInt(food.dataset.n) + 1
                          window._food.push(p)
                          if (!food.style.display) {
                            food.style.display = 'inline'
                            food.firstElementChild.textContent = 1
                          } else {
                            food.firstElementChild.textContent = (Number.parseInt(
                              food.firstElementChild.textContent, 10) + 1)
                          }
                          break     
                        case 'Landmark':
                          landmarks.dataset.n = parseInt(landmarks.dataset.n) + 1
                          window._landmarks.push(p)
                          if (!landmarks.style.display) {
                            landmarks.style.display = 'inline'
                            landmarks.firstElementChild.textContent = 1
                          } else {
                            landmarks.firstElementChild.textContent = (Number.parseInt(
                              landmarks.firstElementChild.textContent, 10) + 1)
                          }
                          break     
                        case 'Restroom':
                          restrooms.dataset.n = parseInt(restrooms.dataset.n) + 1
                          window._restrooms.push(p)
                          if (!restrooms.style.display) {
                            restrooms.style.display = 'inline'
                            restrooms.firstElementChild.textContent = 1
                          } else {
                            restrooms.firstElementChild.textContent = (Number.parseInt(
                              restrooms.firstElementChild.textContent, 10) + 1)
                          }
                          break     
                        default:
                          window._default.push(p)
                      }
                    }
                    const buttons = document.querySelectorAll('span[data-n]')
                    Array.from(buttons).sort((a, b) => {
                      // console.log(a.dataset.n, b.dataset.n)
                      return parseInt(a.dataset.n) < parseInt(b.dataset.n)
                    }).forEach((b) => {
                      buttons[0].parentElement.appendChild(b)
                    })
                  }
                )
              }
            }
          })
          access.addEventListener('click', poiButtonsHandler)
          food.addEventListener('click', poiButtonsHandler)
          landmarks.addEventListener('click', poiButtonsHandler)
          restrooms.addEventListener('click', poiButtonsHandler)
        } catch (e) {
          console.error(e)
        }
      }
      function poiButtonsHandler(e) {
        e.preventDefault()
        e.stopPropagation()
        let _target
        // console.log(e.target) 
        if (e.target?.dataset.n) {
          _target = e.target
        } else {
          _target = e.target.parentElement
        }
        if (!_target.classList.contains(`${_target.dataset.type}On`)) {
          _target.classList.add(`${_target.dataset.type}On`)
          window.map.addItems(window[`_${_target.dataset.type}`])
        } else {
          _target.classList.remove(`${_target.dataset.type}On`)
          window.map.removeAnnotations(window[`_${_target.dataset.type}`])
        }
      }
      window.map.addEventListener("single-tap", async (e) => {
        e.preventDefault()
        e.stopPropagation()
        // window._map.annotations.forEach(a => a.selected = false)
        window.map.annotations.forEach(a => a.selected = false)
        const {latitude, longitude} = window.map.convertPointOnPageToCoordinate(e.pointOnPage)
        const defaultRadius = 50
        const defaultUnits = 'ft'
        console.log(`locate piers within ${defaultRadius} ${defaultUnits} of coords: `
          + `${longitude}, ${latitude}`)
        const results = await (
          await fetch(
            `${origin}/mapkit/locate/${longitude}/${latitude}/${defaultRadius}/${defaultUnits}`
          )
        ).json()
        console.log(results)
        if (results?.total > 0) {
          results.documents.forEach((p) => {
            console.log(
              `${p.value.pier}, ${p.value.coords}, ${p.value.estateName}, `
              + `${p.value.business}, ${p.value.association}`
            )
            let subtitle = ' '
            if (p.value.business !== '' && p.value.association === '') {
              subtitle = p.value.business
            }
            if (p.value.association !== '' && p.value.business === '') {
              subtitle = p.value.association
            }
            if (p.value.firstname !== '' && p.value.lastname !== '') {
              subtitle = `${p.value.firstname} ${p.value.lastname}`
            }
            if (p.value.firstname !== '' && p.value.lastname === '') {
              subtitle = p.value.firstname
            }
            if (p.value.firstname === '' && p.value.lastname !== '') {
              subtitle = p.value.lastname
            }
            if (p.value.estateName !== '') subtitle = p.value.estateName
            console.info(`subtitle: ${subtitle}`)
            const annotationCallout = {
              calloutLeftAccessoryForAnnotation: () => {
                const accessoryViewLeft = document.createElement("div")
                return accessoryViewLeft
              },
              calloutRightAccessoryForAnnotation: () => {
                const accessoryViewRight = document.createElement("a")
                accessoryViewRight.className = "right-accessory-view"
                accessoryViewRight.href = `${origin}/pier/${p.value.pier}`
                accessoryViewRight.target = "_self"
                accessoryViewRight.textContent = "\u{24D8}"
                return accessoryViewRight
              }
            }
            const pierMarker = new window.mapkit.Coordinate(latitude, longitude)
            const pierAnnotation = new window.mapkit.MarkerAnnotation(pierMarker)
            pierAnnotation.title = `Pier ${p.value.pier}`
            pierAnnotation.subtitle = subtitle 
            pierAnnotation.animates = true
            pierAnnotation.selected = true
            pierAnnotation.color = "#4B93E0"
            pierAnnotation.callout = annotationCallout
            window.map.addAnnotation(pierAnnotation)
          })
        }
      })
    </script>
  </section>
</article>

